#!/usr/bin/env bash

# Synopsis:
# Test the track's exercises.
#
# At a minimum, this file must check if the example/exemplar solution of each
# Practice/Concept Exercise passes the exercise's tests.
#
# To check this, you usually have to (temporarily) replace the exercise's solution files
# with its exemplar/example files.
#
# If your track uses skipped tests, make sure to (temporarily) enable these tests
# before running the tests.
#
# The path to the solution/example/exemplar files can be found in the exercise's
# .meta/config.json file, or possibly inferred from the exercise's directory name.

# Example:
# ./bin/test
echo "Checking"

# Verify the Concept Exercises
 for concept_exercise_dir in ./exercises/concept/*/; do
     if [ -d $concept_exercise_dir ]; then
         echo "Checking $(basename "${concept_exercise_dir}") exercise..."
         # TODO: run command to verify that the exemplar solution passes the tests
     fi
 done

# Verify the Practice Exercises
exit_code=0

for practice_exercise_dir in ./exercises/practice/*/; do
    if [ -d $practice_exercise_dir ]; then
        echo "Checking $(basename "${practice_exercise_dir}") exercise..."
        printf '{"version":1,"status":"pass"}' > $(realpath "${practice_exercise_dir}")/expected_results.json
        results_file_path="$(realpath "${practice_exercise_dir}")/results.json"
        expected_results_file_path="$(realpath "${practice_exercise_dir}")/expected_results.json"
        cp $(realpath "${practice_exercise_dir}")/.meta/*.clas.abap $(realpath "${practice_exercise_dir}")
        time -f 'Runtime: %e seconds' docker run \
            --rm \
            --network none \
            --mount type=bind,src="$(realpath "${practice_exercise_dir}")",dst=/solution \
            --mount type=bind,src="$(realpath "${practice_exercise_dir}")",dst=/output \
            --tmpfs /tmp:rw \
            exercism/abap-test-runner $(basename "${practice_exercise_dir}") "/solution" "/output"
        errors="$(diff "${results_file_path}" "${expected_results_file_path}")"
        printf "$errors"

        if [ -z ${errors} ];
            then printf "No Errors\n\n";
            else exit_code=1;
        fi
    fi
done

exit ${exit_code}
